apply plugin: 'maven'

version = VERSION_NAME
group = GROUP

afterEvaluate { project ->

  if (project.getPlugins().hasPlugin('com.android.application') ||
      project.getPlugins().hasPlugin('com.android.library')) {
    task install(type: Upload, dependsOn: assemble) {
      repositories.mavenInstaller {
        configuration = configurations.archives

        pom.groupId = GROUP
        pom.artifactId = POM_ARTIFACT_ID
        pom.version = VERSION_NAME

        pom.project {
          name POM_NAME
          packaging POM_PACKAGING
          description POM_DESCRIPTION
          url POM_SITE_URL

          licenses {
            license {
              name POM_LICENCE_NAME
              url POM_LICENCE_URL
            }
          }
          developers {
            developer {
              id POM_DEVELOPER_ID
              name POM_DEVELOPER_NAME
              email POM_DEVELOPER_EMAIL
            }
          }
          scm {
            connection POM_GIT_URL
            developerConnection POM_GIT_URL
            url POM_SITE_URL
          }
        }
      }
    }

    task androidJavadocs(type: Javadoc) {
      source = android.sourceSets.main.java.source
      classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    }

    task androidJavadocsJar(type: Jar, dependsOn: androidJavadocs) {
      classifier = 'javadoc'
      from androidJavadocs.destinationDir
    }

    task androidSourcesJar(type: Jar) {
      classifier = 'sources'
      from android.sourceSets.main.java.source
    }
  } else {
    install {
      repositories.mavenInstaller {
        pom.groupId = GROUP
        pom.artifactId = POM_ARTIFACT_ID
        pom.version = VERSION_NAME
        // This generates POM.xml with proper parameters
        pom.project {
          name POM_NAME
          packaging POM_PACKAGING
          description POM_DESCRIPTION
          url POM_SITE_URL

          // Set your license
          licenses {
            license {
              name POM_LICENCE_NAME
              url POM_LICENCE_URL
            }
          }
          developers {
            developer {
              id POM_DEVELOPER_ID
              name POM_DEVELOPER_NAME
              email POM_DEVELOPER_EMAIL
            }
          }
          scm {
            connection POM_GIT_URL
            developerConnection POM_GIT_URL
            url POM_SITE_URL
          }
        }
      }
    }

    task sourcesJar(type: Jar, dependsOn: classes) {
      classifier = 'sources'
      from sourceSets.main.allSource
    }

    task javadocJar(type: Jar, dependsOn: javadoc) {
      classifier = 'javadoc'
      from javadoc.destinationDir
    }
  }

  if (JavaVersion.current().isJava8Compatible()) {
    allprojects {
      tasks.withType(Javadoc) {
        options.addStringOption('Xdoclint:none', '-quiet')
      }
    }
  }

  artifacts {
    if (project.getPlugins().hasPlugin('com.android.application') ||
        project.getPlugins().hasPlugin('com.android.library')) {
      archives androidSourcesJar
      archives androidJavadocsJar
    } else {
      archives sourcesJar
      archives javadocJar
    }
  }
}
apply plugin: 'com.jfrog.bintray'


// Bintray
Properties properties = new Properties()
if (project.rootProject.file('local.properties').exists()) {
  properties.load(project.rootProject.file('local.properties').newDataInputStream())
}

bintray {
  user = properties.getProperty("bintray.user")
  key = properties.getProperty("bintray.apikey")

  configurations = ['archives']
  pkg {
    repo = POM_REPO
    name = bintrayName
    desc = POM_DESCRIPTION
    websiteUrl = POM_SITE_URL
    userOrg = POM_ORG
    vcsUrl = POM_GIT_URL
    licenses = POM_LICENCES
    publish = true
    publicDownloadNumbers = true
    version {
      desc = POM_DESCRIPTION
      gpg {
        sign = true //Determines whether to GPG sign the files. The default is false
        passphrase = properties.getProperty("bintray.gpg.password")
        //Optional. The passphrase for GPG signing'
      }
    }
  }
}
